name: Pull Request - Build and Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
      - develop
      - integration-work-flow

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.9'

jobs:
  # Step 1: Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: 'maven'

      - name: Check code formatting with Maven
        run: mvn spotless:check || echo "No spotless plugin configured"
        continue-on-error: true

      - name: Run Maven validate
        run: mvn validate

  # Step 2: Run Tests with Coverage (after lint passes)
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: 'maven'

      - name: Run tests with coverage
        run: mvn clean test jacoco:report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-pr
          fail_ci_if_error: false

  # Step 3: Security Scan (parallel with tests after lint)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: 'maven'

      - name: Run OWASP Dependency Check
        run: mvn dependency-check:check || echo "No dependency-check configured"
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Step 4: Build Check (after tests and security pass)
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Verify build artifacts
        run: |
          echo "‚úÖ Build successful!"
          echo ""
          echo "JAR file:"
          ls -lh target/*.jar | grep -v original || true
          echo ""
          JAR_SIZE=$(du -h target/journal-index-integration-1.0.0.jar | cut -f1)
          echo "üì¶ JAR Size: $JAR_SIZE"
          echo ""
          echo "‚úÖ Build artifacts verified"

  # Final Summary
  pr-validation-complete:
    name: ‚úÖ PR Validation Complete
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan, build]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "üìã Pull Request Validation Summary"
          echo "===================================="
          echo ""
          echo "1. Lint:     ${{ needs.lint.result }}"
          echo "2. Tests:    ${{ needs.test.result }}"
          echo "3. Security: ${{ needs.security-scan.result }}"
          echo "4. Build:    ${{ needs.build.result }}"
          echo ""
          
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.security-scan.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Some checks failed. Please fix before merging."
            exit 1
          fi
          
          echo "üéâ All PR validation checks passed!"
          echo "‚úÖ This PR is ready to merge to master"
          echo ""
          echo "After merge, the CI/CD workflow will:"
          echo "  1. Run all checks again"
          echo "  2. Run SonarCloud analysis"
          echo "  3. Deploy to AWS Production"
