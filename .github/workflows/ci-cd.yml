name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [published]

env:
  MAVEN_OPTS: -Xmx1024m
  JAVA_OPTS: -Xmx1024m

jobs:
  # Code Quality and Testing
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'zulu'
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Validate Maven configuration
        run: mvn -B validate
      
      - name: Compile source code
        run: mvn -B compile
      
      - name: Run unit tests
        run: mvn -B test
      
      - name: Generate test coverage report
        run: mvn -B jacoco:report
      
      - name: SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=azizowaisi_JournalIndexIntegration
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: target/site/jacoco/

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'zulu'
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'JournalIndexIntegration'
          path: '.'
          format: 'HTML'
          args: '--enableRetired --enableExperimental'
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: reports/

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'zulu'
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build with Maven
        run: mvn -B clean package -DskipTests
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: journal-index-integration
          path: target/*.jar

  # Docker Build (if needed)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/journal-index-integration:latest
            ${{ secrets.DOCKER_USERNAME }}/journal-index-integration:${{ github.sha }}

  # Serverless Deployment (if needed)
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Serverless Framework
        run: npm install -g serverless
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to AWS
        run: serverless deploy --stage production
        env:
          NODE_ENV: production

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality, security, build, deploy]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.quality.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ All checks passed successfully!"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
      
      - name: Notify on failure
        if: ${{ needs.quality.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ Some checks failed!"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
