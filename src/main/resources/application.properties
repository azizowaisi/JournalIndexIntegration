# Production Configuration
# Journal Index Integration - Production Environment

# =============================================================================
# ENVIRONMENT IDENTIFICATION
# =============================================================================
spring.profiles.active=prod
environment.name=production

# =============================================================================
# LAMBDA OPTIMIZATION
# =============================================================================
# Lazy initialization to speed up cold starts
spring.main.lazy-initialization=true
spring.data.jpa.repositories.bootstrap-mode=lazy

# Reduce startup overhead
spring.jmx.enabled=false
spring.main.banner-mode=off
spring.output.ansi.enabled=NEVER

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# JPA Configuration (Production)
# Auto-create tables if they don't exist
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Allow Hibernate to create/update schema automatically
spring.jpa.properties.hibernate.hbm2ddl.auto=update

# Disable schema validation on startup
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

# Production Data Source Configuration
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# MySQL connection parameters optimized for Lambda
# Keep connection URL simple for faster initialization
spring.datasource.url=${DB_URL}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&connectTimeout=5000&socketTimeout=10000

# Connection Pool (Optimized for Lambda - small pool, fast startup)
spring.datasource.hikari.maximum-pool-size=2
spring.datasource.hikari.minimum-idle=0
spring.datasource.hikari.idle-timeout=60000
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.max-lifetime=300000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.initialization-fail-timeout=1

# Additional connection settings for Lambda
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.register-mbeans=false

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
aws.region=${AWS_REGION}
aws.sqs.queue.url=${SQS_QUEUE_URL}

# S3 Configuration
aws.s3.bucket.name=${S3_BUCKET_NAME}
aws.s3.region=${AWS_REGION}

# =============================================================================
# OAI CONFIGURATION
# =============================================================================
oai.default.metadata.prefix=oai_dc
oai.batch.size=${OAI_BATCH_SIZE:100}
oai.timeout=${OAI_TIMEOUT:30000}

# =============================================================================
# LOGGING CONFIGURATION (MINIMAL FOR PRODUCTION)
# =============================================================================
# Log4j2 is configured via log4j2.xml - these are just level overrides
logging.level.root=WARN
logging.level.com.teckiz.journalindex=INFO
logging.level.org.apache.camel=WARN
logging.level.org.apache.camel.component.sql=ERROR
logging.level.org.springframework.web=ERROR
logging.level.org.springframework.boot=WARN
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
logging.level.org.springframework.boot.autoconfigure=ERROR
logging.level.org.springframework.jdbc=WARN
logging.level.com.zaxxer.hikari=WARN
logging.level.org.hibernate.engine.jdbc=WARN

# =============================================================================
# ERROR HANDLING (PRODUCTION OPTIMIZED)
# =============================================================================
error.max.retries=${MAX_RETRIES:3}
error.retry.delay=${RETRY_DELAY:3000}

# =============================================================================
# PRODUCTION FEATURES
# =============================================================================

# Minimal management endpoints for Lambda (disabled to reduce startup time)
management.endpoints.enabled-by-default=false
management.endpoint.health.enabled=true
management.endpoint.health.show-details=never
management.health.defaults.enabled=false
management.info.env.enabled=false

# =============================================================================
# CACHING (DISABLED FOR LAMBDA - reduces startup time)
# =============================================================================
# Caching disabled to improve cold start performance
spring.cache.type=none

# =============================================================================
# SECURITY (DISABLED FOR LAMBDA)
# =============================================================================
# Security not needed in Lambda environment - handled by AWS IAM
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# =============================================================================
# MONITORING (DISABLED FOR LAMBDA - reduces cold start time)
# =============================================================================
# Micrometer configuration - disabled for Lambda performance
management.metrics.export.cloudwatch.enabled=false
management.metrics.export.prometheus.enabled=false
management.metrics.enable.all=false

# =============================================================================
# FEATURE FLAGS (PRODUCTION)
# =============================================================================
feature.enable.oai.ojs=${ENABLE_OJS_OAI:true}
feature.enable.oai.doj=${ENABLE_DOAJ:true}
feature.enable.teckiz=${ENABLE_TECKIZ:true}
feature.enable.cron.import=${ENABLE_CRON_IMPORT:true}
feature.enable.batch.processing=${ENABLE_BATCH_PROCESSING:true}
feature.enable.parallel.processing=${ENABLE_PARALLEL_PROCESSING:true}
feature.enable.caching=${ENABLE_CACHING:true}

# =============================================================================
# PERFORMANCE TUNING (LAMBDA OPTIMIZED)
# =============================================================================
# No web server needed for Lambda - this reduces startup time
spring.main.web-application-type=none

# JPA optimization
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.connection.autocommit=false
spring.jpa.open-in-view=false

# =============================================================================
# EXTERNAL SERVICES (PRODUCTION)
# =============================================================================
# External API configuration
external.api.timeout=${EXTERNAL_API_TIMEOUT:30}
external.api.retries=${EXTERNAL_API_RETRIES:3}
external.api.rate.limit=${RATE_LIMIT_REQUESTS_PER_MINUTE:60}

# Circuit breaker configuration
resilience4j.circuitbreaker.instances.oai.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.oai.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.oai.sliding-window-size=10

# =============================================================================
# BACKUP AND DISASTER RECOVERY
# =============================================================================
# Backup configuration
backup.enabled=${ENABLE_AUTOMATED_BACKUPS:true}
backup.retention.days=${BACKUP_RETENTION_DAYS:30}
backup.schedule=${BACKUP_SCHEDULE:0 2 * * ?}

# =============================================================================
# COMPLIANCE AND AUDITING
# =============================================================================
# Audit logging
audit.logging.enabled=${ENABLE_AUDIT_LOGGING:true}
audit.log.retention.days=${AUDIT_LOG_RETENTION_DAYS:90}

# Data encryption
data.encryption.enabled=${ENABLE_DATA_ENCRYPTION:true}
access.logging.enabled=${ENABLE_ACCESS_LOGGING:true}

# =============================================================================
# HEALTH CHECKS (DISABLED FOR LAMBDA - reduces startup time)
# =============================================================================
# Health check configuration - minimal for Lambda
management.health.db.enabled=false
management.health.disk-space.enabled=false