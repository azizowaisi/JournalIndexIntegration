service: journal-index-integration

frameworkVersion: '4'

provider:
  name: aws
  runtime: java21
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 300
  memorySize: 512
  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET_NAME}
    serverSideEncryption: AES256
  environment:
    DB_URL: ${env:DB_URL}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    AWS_REGION: ${self:provider.region}
    SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - arn:aws:sqs:${self:provider.region}:*:${env:SQS_QUEUE_NAME}
        - Effect: Allow
          Action:
            - rds:DescribeDBInstances
            - rds:DescribeDBClusters
          Resource: '*'
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action:
            - events:PutRule
            - events:PutTargets
            - events:DescribeRule
          Resource: '*'
  tags:
    Service: ${self:service}
    Environment: ${self:provider.stage}
    ManagedBy: serverless

package:
  artifact: target/journal-index-integration-1.0.0.jar

functions:
  # CreatorCommand Lambda - Handles SQS messages and creates IndexImportQueue entries
  creatorCommand:
    handler: com.teckiz.journalindex.LambdaHandler
    name: ${self:service}-${self:provider.stage}-creator
    description: "CreatorCommand: Fetches data from OAI endpoints and saves to IndexImportQueue"
    timeout: 300
    memorySize: 512
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${env:SQS_QUEUE_NAME}
          batchSize: 1
          functionResponseType: ReportBatchItemFailures
    environment:
      FUNCTION_TYPE: creator
    tags:
      Service: ${self:service}
      Function: creator
      Environment: ${self:provider.stage}

  # ImportCommand Lambda - Processes IndexImportQueue entries
  importCommand:
    handler: com.teckiz.journalindex.ImportCommandLambdaHandler
    name: ${self:service}-${self:provider.stage}-importer
    description: "ImportCommand: Processes IndexImportQueue entries and maps data to database entities"
    timeout: 180
    memorySize: 256
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true
          description: "Process IndexImportQueue entries every 5 minutes"
      - schedule:
          rate: cron(0 2 * * ? *)
          enabled: false
          description: "Daily cleanup at 2 AM UTC (disabled by default)"
    environment:
      FUNCTION_TYPE: importer
      BATCH_SIZE: 10
      MAX_RETRIES: 3
    tags:
      Service: ${self:service}
      Function: importer
      Environment: ${self:provider.stage}

# Custom resources
resources:
  Resources:
    # SQS Queue for journal processing
    JournalIndexQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_QUEUE_NAME}
        VisibilityTimeoutSeconds: 300
        MessageRetentionPeriod: 1209600 # 14 days
        ReceiveMessageWaitTimeSeconds: 20 # Long polling
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt JournalIndexDeadLetterQueue.Arn
          maxReceiveCount: 3
        Tags:
          - Key: Service
            Value: ${self:service}
          - Key: Environment
            Value: ${self:provider.stage}

    # Dead Letter Queue for failed messages
    JournalIndexDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_QUEUE_NAME}-dlq
        MessageRetentionPeriod: 1209600 # 14 days
        Tags:
          - Key: Service
            Value: ${self:service}
          - Key: Environment
            Value: ${self:provider.stage}

    # CloudWatch Log Groups
    CreatorCommandLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-creator
        RetentionInDays: 14

    ImportCommandLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-importer
        RetentionInDays: 14

    # CloudWatch Alarms
    CreatorCommandErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-creator-errors
        AlarmDescription: "CreatorCommand Lambda errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-creator
        TreatMissingData: notBreaching

    ImportCommandErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-importer-errors
        AlarmDescription: "ImportCommand Lambda errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-importer
        TreatMissingData: notBreaching

  Outputs:
    CreatorCommandArn:
      Description: "CreatorCommand Lambda Function ARN"
      Value: !GetAtt CreatorCommandLambdaFunction.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-creator-arn

    ImportCommandArn:
      Description: "ImportCommand Lambda Function ARN"
      Value: !GetAtt ImportCommandLambdaFunction.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-importer-arn

    SQSQueueUrl:
      Description: "SQS Queue URL"
      Value: !Ref JournalIndexQueue
      Export:
        Name: ${self:service}-${self:provider.stage}-queue-url

    SQSQueueArn:
      Description: "SQS Queue ARN"
      Value: !GetAtt JournalIndexQueue.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-queue-arn

# Plugins
plugins:
  #- serverless-offline # For local development
  #- serverless-plugin-warmup # For Lambda warmup (optional)

custom:
  # Serverless offline configuration
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    host: 0.0.0.0

  # Warmup configuration (optional)
  warmup:
    default: false
    creatorCommand: false
    importCommand: false

# Stack tags (moved to provider level)
