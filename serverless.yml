service: journal-index-integration

frameworkVersion: '4'

provider:
  name: aws
  runtime: java21
  region: ${opt:region, 'ap-south-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 300
  memorySize: 512
  environment:
    DB_URL: ${env:DB_URL}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - ${env:SQS_QUEUE_ARN}
        - Effect: Allow
          Action:
            - rds:DescribeDBInstances
            - rds:DescribeDBClusters
          Resource: '*'
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action:
            - events:PutRule
            - events:PutTargets
            - events:DescribeRule
          Resource: '*'
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${env:S3_BUCKET_NAME}/*
  tags:
    Service: ${self:service}
    Environment: ${self:provider.stage}
    ManagedBy: serverless

package:
  artifact: target/journal-index-integration-1.0.0.jar

functions:
  # Journal Processor Lambda - Single unified process
  journalProcessor:
    handler: com.teckiz.journalindex.LambdaHandler
    name: ${self:service}-${self:provider.stage}-processor
    description: "Journal Processor: Receives SQS messages, fetches OAI data, saves to S3 and database"
    timeout: 900
    memorySize: 1024
    events:
      - sqs:
          arn: ${env:SQS_QUEUE_ARN}
          batchSize: 1
          functionResponseType: ReportBatchItemFailures
    environment:
      FUNCTION_TYPE: processor
      BATCH_SIZE: 10
      MAX_RETRIES: 3
    tags:
      Service: ${self:service}
      Function: processor
      Environment: ${self:provider.stage}

# Custom resources
resources:
  Resources:
    # SQS Queue for journal processing
    JournalIndexQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: journal-index-queue-prod
        VisibilityTimeoutSeconds: 300
        MessageRetentionPeriod: 1209600 # 14 days
        ReceiveMessageWaitTimeSeconds: 20 # Long polling
        Tags:
          - Key: Service
            Value: ${self:service}
          - Key: Environment
            Value: ${self:provider.stage}
    # CloudWatch Log Groups
    JournalProcessorLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-processor
        RetentionInDays: 14

    # CloudWatch Alarms
    JournalProcessorErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-processor-errors
        AlarmDescription: "Journal Processor Lambda errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-processor
        TreatMissingData: notBreaching

  Outputs:
    JournalProcessorArn:
      Description: "Journal Processor Lambda Function ARN"
      Value: !GetAtt JournalProcessorLambdaFunction.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-processor-arn

    SQSQueueUrl:
      Description: "SQS Queue URL"
      Value: !Ref JournalIndexQueue
      Export:
        Name: ${self:service}-${self:provider.stage}-queue-url

    SQSQueueArn:
      Description: "SQS Queue ARN"
      Value: !GetAtt JournalIndexQueue.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-queue-arn

# Plugins
plugins:
  #- serverless-offline # For local development
  #- serverless-plugin-warmup # For Lambda warmup (optional)

custom:
  # Serverless offline configuration
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    host: 0.0.0.0

  # Warmup configuration (optional)
  warmup:
    default: false
    journalProcessor: false

# Stack tags (moved to provider level)
