service: journal-index-integration

frameworkVersion: '4'

provider:
  name: aws
  runtime: java17
  region: ${opt:region, 'ap-south-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 300
  memorySize: 2048
  deploymentBucket:
    name: ${env:SERVERLESS_DEPLOYMENT_BUCKET}
  vpc:
    securityGroupIds:
      - ${env:VPC_SECURITY_GROUP_ID}
    subnetIds:
      - ${env:VPC_SUBNET_ID_1}
      - ${env:VPC_SUBNET_ID_2}
  environment:
    # Database Configuration
    DB_URL: ${env:DB_URL}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    # AWS Configuration
    SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
    SQS_QUEUE_ARN: ${env:SQS_QUEUE_ARN}
    # VPC Configuration
    VPC_SECURITY_GROUP_ID: ${env:VPC_SECURITY_GROUP_ID}
    VPC_SUBNET_ID_1: ${env:VPC_SUBNET_ID_1}
    VPC_SUBNET_ID_2: ${env:VPC_SUBNET_ID_2}
    # MySQL VPC Configuration
    MYSQL_HOST: ${env:MYSQL_HOST}
    MYSQL_PORT: ${env:MYSQL_PORT}
    MYSQL_DATABASE: ${env:MYSQL_DATABASE}
    MYSQL_SSL_MODE: ${env:MYSQL_SSL_MODE}
    MYSQL_CONNECTION_TIMEOUT: ${env:MYSQL_CONNECTION_TIMEOUT}
    MYSQL_SOCKET_TIMEOUT: ${env:MYSQL_SOCKET_TIMEOUT}
    # Function Configuration
    FUNCTION_TYPE: processor
    LOG_LEVEL: INFO
  iam:
    role:
      statements:
        # SQS permissions
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - ${env:SQS_QUEUE_ARN}
        # VPC networking permissions (required for Lambda in VPC)
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AttachNetworkInterface
            - ec2:DetachNetworkInterface
          Resource: '*'
        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
  tags:
    Service: ${self:service}
    Environment: ${self:provider.stage}
    ManagedBy: serverless

package:
  artifact: target/journal-index-integration-1.0.0.jar

functions:
  # Journal Processor Lambda - Processes S3 XML files and saves articles
  journalProcessor:
    handler: com.teckiz.journalindex.LambdaHandler
    name: ${self:service}-${self:provider.stage}-processor
    description: "Processes article JSON messages from SQS and saves directly to database"
    timeout: 900
    memorySize: 2048  # Increased for faster cold start (more CPU = faster init)
    snapStart: true  # Enable SnapStart for near-instant cold starts
    vpc:
      securityGroupIds:
        - ${env:VPC_SECURITY_GROUP_ID}
      subnetIds:
        - ${env:VPC_SUBNET_ID_1}
        - ${env:VPC_SUBNET_ID_2}
    events:
      - sqs:
          arn: ${env:SQS_QUEUE_ARN}
          batchSize: 1  # Process 1 message at a time
          functionResponseType: ReportBatchItemFailures
    environment:
      LOG_LEVEL: DEBUG
    tags:
      Service: ${self:service}
      Function: processor
      Environment: ${self:provider.stage}

# No custom resources needed - using existing VPC resources
